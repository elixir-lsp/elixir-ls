defmodule ElixirLS.LanguageServer.Experimental.Provider.CodeAction.WarningParser do
  @moduledoc """
  A parser for elixir warning messages
  """

  @type error_message :: String.t()

  def parse(warning_or_error) do
    with {:ok, error_type} <- extract_type(warning_or_error),
         {:ok, message} <- extract_message(warning_or_error),
         {:ok, path, line} <- extract_path_and_line(warning_or_error),
         {:ok, mfa} <- extract_mfa(warning_or_error) do
      {:ok, error_type, message, path, line, mfa}
    end
  end

  defp extract_type(warning_or_error) do
    
  end

  @path_and_line_re ~r/\s+([^\:]+):(\d+)/
  def extract_path_and_line(message) do
    with {:ok, line} <- fetch_line(message, 1),
         [[_, path, line_number_string]] <- Regex.scan(@path_and_line_re, line),
         {line_number, ""} <- Integer.parse(line_number_string) do
      {:ok, path, line_number}
    else
      _ ->
        :error
    end
  end

  @mfa_re ~r/:\s+([^\/]+)\/(\d+)/
  defp extract_mfa(message) do
    with {:ok, line} <- fetch_line(message, 1),
         [[_, module_and_function, arity_string]] <- Regex.scan(@mfa_re, line),
         {arity, ""} <- Integer.parse(arity_string) do
      {module, function} = split_module_and_function(module_and_function)
      {:ok, {module, function, arity}}
    else
      _ ->
        :error
    end
  end

  defp split_module_and_function(module_and_function) do
    [function | reversed_module] =
      module_and_function
      |> String.split(".")
      |> Enum.reverse()

    module =
      reversed_module
      |> Enum.reduce([], fn piece, acc -> [String.to_atom(piece) | acc] end)
      |> Module.concat()

    {module, String.to_atom(function)}
  end
end
